var documenterSearchIndex = {"docs":
[{"location":"#PythagoreanTriples","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"","category":"section"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"A Pythagorean Triple is a list of three positive integers (abc)  with the property that a^2 + b^2 = c^2. That is, they are integers that are the lengths of the two legs and the hypotenuse of a right triangle.","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"In this module, a PythagoreanTriple is a container that holds three such integers with the additional property that ab. ","category":"page"},{"location":"#Construction","page":"PythagoreanTriples","title":"Construction","text":"","category":"section"},{"location":"#Three-parameter-construction","page":"PythagoreanTriples","title":"Three-parameter construction","text":"","category":"section"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"A Pythagorean triple can be constructed simply by specifying the lengths of the legs and hypotenuse of a right triangle","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"julia> using PythagoreanTriples\n\njulia> T = PythagoreanTriple(4,3,5)\nPythagoreanTriple(3, 4, 5)","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"If the three integers are not the side lengths of a right triangle, an error is thrown:","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"julia> T = PythagoreanTriple(4,5,6)\nERROR: (4, 5, 6) does not define a Pythagorean triple","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"In addition, the three side lengths can be given as a tuple:","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"julia> abc = (4,3,5)\n(4, 3, 5)\n\njulia> PythagoreanTriple(abc)\nPythagoreanTriple(3, 4, 5)","category":"page"},{"location":"#Two-parameter-construction","page":"PythagoreanTriples","title":"Two-parameter construction","text":"","category":"section"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"Pythagorean triples can be created from a pair of integers u,v in which the  legs of the right triangle are abs(u^2 - v^2) and abs(2*u*v), and the hypotenuse is u^2 + v^2. ","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"A user can give the values u and v to create a Pythagorean triple:","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"julia> T = PythagoreanTriple(2,5)\nPythagoreanTriple(20, 21, 29)","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"Note that the integers u and v must be distinct and nonzero:","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"julia> PythagoreanTriple(0,5)\nERROR: (0, 5) does not yield a PythagoreanTriple\n\njulia> PythagoreanTriple(2,2)\nERROR: (2, 2) does not yield a PythagoreanTriple","category":"page"},{"location":"#Generation","page":"PythagoreanTriples","title":"Generation","text":"","category":"section"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"We call a Pythagorean triple (a,b,c) primitive provided gcd(a,b) == 1.  Thus (3,4,5) is primitive but (6,8,10) is not. ","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"Use TripleGenerator to create an iterator for primitive Pythagorean triples. The iterator TripleGenerator(n) will create n primitive triples:","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"julia> for t in TripleGenerator(5)\n       println(t)\n       end\nPythagoreanTriple(3, 4, 5)\nPythagoreanTriple(5, 12, 13)\nPythagoreanTriple(8, 15, 17)\nPythagoreanTriple(7, 24, 25)\nPythagoreanTriple(20, 21, 29)","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"If n is omitted (or negative) the iterator will produce values endlessly. For example:","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"julia> for t in TripleGenerator()\n           a,b,c = make_tuple(t)\n           if a > 1000\n               println(t)\n               break\n           end\n       end\nPythagoreanTriple(1007, 1224, 1585)","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"Note: The function is_primitive is available to check if a Pythagorean triple is primitive:","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"julia> t = PythagoreanTriple(3,4,5)\nPythagoreanTriple(3, 4, 5)\n\njulia> is_primitive(t)\ntrue\n\njulia> t = PythagoreanTriple(30,40,50)\nPythagoreanTriple(30, 40, 50)\n\njulia> is_primitive(t)\nfalse","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"The function make_primitive takes a Pythagorean triple and returns a new triple having divided the three numbers by their greatest common divisor.","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"julia> t = PythagoreanTriple(6,8,10)\nPythagoreanTriple(6, 8, 10)\n\njulia> make_primitive(t)\nPythagoreanTriple(3, 4, 5)","category":"page"},{"location":"#Scalar-multiple","page":"PythagoreanTriples","title":"Scalar multiple","text":"","category":"section"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"Pythagorean triples can be multiplied (on the left) by a positive integer. For example:","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"julia> p = PythagoreanTriple(5,12)\nPythagoreanTriple(119, 120, 169)\n\njulia> 10p\nPythagoreanTriple(1190, 1200, 1690)","category":"page"},{"location":"#Finding-parameters","page":"PythagoreanTriples","title":"Finding parameters","text":"","category":"section"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"All primitive Pythagorean triples (and some, but not all, non-primitive triples) can be constructed using two parameters p = PythagoreanTriple(u,v). ","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"Given such a triple, the function get_parameters will return a u and v that creates that triple.","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"julia> p = PythagoreanTriple(5,12,13)\nPythagoreanTriple(5, 12, 13)\n\njulia> u,v = get_parameters(p)\n(2, 3)\n\njulia> PythagoreanTriple(u,v)\nPythagoreanTriple(5, 12, 13)","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"While some non-primitive triples, such as (6,8,10), can be created this way, others, such as (30,40,50), cannot:","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"julia> p = get_parameters(6,8,10)\n(1, 3)\n\njulia> get_parameters(30,40,50)\nERROR: Unable to find parameters for (30, 40, 50) (non-primitive)","category":"page"},{"location":"#Extracting-values","page":"PythagoreanTriples","title":"Extracting values","text":"","category":"section"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"The function make_tuple returns a 3-tuple containing the three values:","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"julia> t = PythagoreanTriple(5,11)\nPythagoreanTriple(96, 110, 146)\n\njulia> make_tuple(t)\n(96, 110, 146)","category":"page"},{"location":"#Sorting","page":"PythagoreanTriples","title":"Sorting","text":"","category":"section"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"Pythagorean triples can be compared using the usual <, <=, >, >= relations.  Lists of triples can be sorted. They are sorted \"reverse lexicographically\". That is  when we check if (a,b,c) is less than or equal to (aa,bb,cc) we first see if c ≤ cc. If so, then if b ≤ bb. And if so, then if a ≤ aa. ","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"``` julia> list = collect(TripleGenerator(10)) 10-element Vector{Any}:  PythagoreanTriple(3, 4, 5)  PythagoreanTriple(5, 12, 13)  PythagoreanTriple(8, 15, 17)  PythagoreanTriple(7, 24, 25)  PythagoreanTriple(20, 21, 29)  PythagoreanTriple(9, 40, 41)  PythagoreanTriple(12, 35, 37)  PythagoreanTriple(11, 60, 61)  PythagoreanTriple(28, 45, 53)  PythagoreanTriple(33, 56, 65)","category":"page"},{"location":"","page":"PythagoreanTriples","title":"PythagoreanTriples","text":"julia> sort(list) 10-element Vector{Any}:  PythagoreanTriple(3, 4, 5)  PythagoreanTriple(5, 12, 13)  PythagoreanTriple(8, 15, 17)  PythagoreanTriple(7, 24, 25)  PythagoreanTriple(20, 21, 29)  PythagoreanTriple(12, 35, 37)  PythagoreanTriple(9, 40, 41)  PythagoreanTriple(28, 45, 53)  PythagoreanTriple(11, 60, 61)  PythagoreanTriple(33, 56, 65)  ```","category":"page"}]
}
